Liebe APBC-ler/innen,

(1) Zufallssequenzen (unter Erhaltung der Buchstabenhaeufigkeiten):

  (a) WUERFELN: Schreibe ein Programm, das eine Sequenze einliest die
      Haufigkeiten der einzelnen Buchstaben des zugrundeliegenden
      Alphabetes bestimmt und gemaesz dieser "gemessenen" Haufigkeiten neue
      zufaellige Sequenzen mit der gleichen Laenge wie die der
      urspruenglichen Sequenz erzeugt.

      CUUUUGCUAG

          |
	  V
      
      A => 0.1             UGUACGCUGA
      C => 0.2    -----\   ACCUUCAUCU
      G => 0.2    -----/   UCUUCCUCCC
      U => 0.5             GUGCAUUUGU

      (Anmerkung: Dieser Methode liefert natuerlich nur im statistischen
       Mittel Zufallssequenzen mit den urspruenglich gemessenen Buchstaben-
       haefigkeiten. Jede einzelne Sequenz kann stark von diesen abweichen)
      

  (b) SHUFFELN: Schreibe ein Programm, das eine Sequenze einliest und durch
      zufaelliges vertauschen (= shuffeln) der Buchstaben aus der
      urspruenglichen Sequenze eine neue Zufallssequenz erzeugt, wobei die
      Anzahl der Vertauschungen um eins kleiner sein soll als die Zahl der
      Buchstaben in der Orginalsequenz.
      
      C <-+ G     G     G     G     G     G     G     G     G
      U   | U <-+ C	C     C	    C	  C	C     C	    C
      U   | U   | U <-+	U     U	    U	  U	U     U	    U
      U   | U   | U   |	U <-+ C	    C	  C	C     C	    C
      U   | U   | U <-+ U   | U <-+ G	  G	G     G	    G
      G <-+ C <-+ U	U   | G   | G <-+ A	A     A	    A
      C     C	  C	C <-+ U   | U   | U <-+	G     G	    G
      U     U	  U	U     U   | U   | U   |	U <-+ U	    U
      A     A	  A	A     A   | A <-+ G <-+	U   | U <-+ U
      G     G	  G	G     G <-+ U	  U	U <-+ U <-+ U

      (Anmerkung: Diese Methode erhaelt exakt die Haeufigkeiten der
       Buchstaben der Orginalsequenz und wir ueblicherweise als
       Fisher-Yates shuffle bezeichnet)

(2) Zufallssequenzen (unter erhalt der k-lets)

    Schreibe ein Programm, dasz eine Sequenz einliest und eine zufaellige
    Sequenz erzeugt, welche die gleichen k-let Haeufigkeiten besitzt wie
    die Orginalsequenz. Ein k-let ist eine subsequenz der Laenge k (zB beim
    Dinukleotidgehalt von Nukleinsaeuren ist k=2).

    Der k-let Shuffling Algorithmus funktioniert wie folgt:

    (a) wenn die Sequenz k-let geshuffelt werden soll, bestimme man alle
        Subsequenzen der Laenge k-1. (Sprich fuer Dinukleotid shuffling ist
        das das Sequenzalphabet, fuer Trinukleotide shuffling sind das alle
        Dinucleotide usw.)

     (b) die unter (a) bestimmten Subsequenzen bilden die Ecken eines
         Graphen (der anfaenglich keine Kanten besitzt).

	 CUUUUGCUAG

             | fuer k=2
	     V
	 
	    A  U

	    G  C

     (c) nun geht man die urspruenglichen Sequenze durch und setzt fuer
         alle aufeinanderfolgenden k-lets eine entsprechende gerichtete
         Kante in den Graphen ein, wobei zwei Ecken auch durch mehrere
         Kanten verbunden sein koennen (Sprich es wird ein sogenannter
         gerichteter Multigraph aufgebaut)
	 
                 +-----+
                 |+---+|
	         ||+-+||
		 ||| |||
                 vvv |||
             A<---U--+++
	     |  / ^^
	     | /  ||
	     vv   ||
	      G-->C

       (d) jeder Eulerpfad in diesem Multigraphen entspricht einer
           geshuffelten Version der uespruenglichen Sequenzeinen unter
           erhalt der k-let Haeufigkeiten. Ein Eulerpfad durchwandert jede
           Kante des (Multi)Graphen exakt 1x.

       (e) Die grosze Kunst ist nun eine Methode zu finden die aus allen
           moeglichen Eulerpfaden im Multigraphen statistisch gleichverteilt
           welche ziehen kann. Die beiden nachfolgenden Paper
           kandel-DAM-96.pdf und jiang-BMC-Bioinf-08.pdf, setzen sich mit
           diesem Problem auseinander:

	   1. Kandel D et al (1996) Shuffling biological sequences.
	      Discete Appl Math 71:171-185
	      doi:10.1016/S0166-218X(97)81456-4
	   
	   2. Jiang M et al (2008) uShuffle: a useful tool for shuffling
	      biological sequences while preserving the k-let counts.
	      BMC Bioinformatics 9:192
	      doi:10.1186/1471-2105-9-192

happy hacking

http://www.tbi.univie.ac.at/~xtof/Leere/270034/
